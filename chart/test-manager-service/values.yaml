## 初始化配置至配置服务及初始化本服务数据库
preJob:
  # job 超时时间
  timeout: 1200
  # 工具 jar 包镜像库地址
  image: registry.cn-shanghai.aliyuncs.com/c7n/dbtool:0.7.2
  # 初始化数据库定义
  preInitDB:
    # 是否初始化本服务数据库
    enabled: true
    datasource:
      # 本服务数据库相关信息
      url: jdbc:mysql://localhost:3306/?useUnicode=true&characterEncoding=utf-8&useSSL=false&useInformationSchema=true&remarks=true&allowMultiQueries=true&serverTimezone=Asia/Shanghai
      username: username
      password: password
      driver: com.mysql.jdbc.Driver
    datasources:
      # 多数据源初始化
      platform:
        url: jdbc:mysql://localhost:3306/?useUnicode=true&characterEncoding=utf-8&useSSL=false&useInformationSchema=true&remarks=true&serverTimezone=Asia/Shanghai
        username: username
        password: password
        driver: com.mysql.jdbc.Driver
## 实例运行数量
replicaCount: 1

## 设置默认的 image、imageTag 和 imagePullPolicy。
image:
  repository: registry.cn-shanghai.aliyuncs.com/c7n/test-manager-service
  tag: ~
  pullPolicy: IfNotPresent

## Deployment 更新策略
deploymentUpdate:
  type: RollingUpdate
  maxUnavailable: 0
  maxSurge: 100%

## Pod 优先级设置
## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
##
priorityClassName: ""

## Pod 节点分配
## ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}
tolerations: []
affinity: {}

## 给 Pod 附加的 annotations
podAnnotations: {}

## ## Pod 附加的 labels
podLabels: {}

## 实例运行时的环境变量
env:
  open:
    # 本实例服务端口
    SERVER_PORT: 8093
    # 本实例管理端口
    MANAGEMENT_SERVER_PORT: 8094

    # 是否启用配置中心
    SPRING_CLOUD_CONFIG_ENABLED: false
    # 配置中心地址
    SPRING_CLOUD_CONFIG_URI: http://register-server:8000


    # Redis 主机地址
    SPRING_REDIS_HOST: localhost
    # Redis 端口
    SPRING_REDIS_PORT: 6379
    # Redis db
    SPRING_REDIS_DATABASE: 13

    # 注册服务地址
    EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://register-server:8000/eureka/

    # 数据库连接地址
    SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/test_manager_service?useUnicode=true&characterEncoding=utf-8&useSSL=false&useInformationSchema=true&remarks=true&allowMultiQueries=true&serverTimezone=Asia/Shanghai
    # 数据库用户名
    SPRING_DATASOURCE_USERNAME: username
    # 数据库密码
    SPRING_DATASOURCE_PASSWORD: password
    # 连接池最小空闲连接数
    SPRING_DATASOURCE_MINIMUM_IDLE: 20
    # 连接池允许的最大连接数
    SPRING_DATASOURCE_MAXIMUM_POOL_SIZE: 200
    # 等待连接池分配连接的最大时长（毫秒）
    SPRING_DATASOURCE_CONNECTION_TIMEOUT: 30000

    # 清理permission表中的旧接口和role_permission表中角色和权限层级不匹配的脏数据
    CHOERODON_CLEANPERMISSION: false
    # 文件服务域名
    SERVICES_ATTACHMENT_URL: http://minio.example.com
    # 是否迁移minio服务并合并bucket,true bucket为test-service,false bucket为原来的默认test
    SERVICES_BUCKET_MERGED: false

    ## Skywalking 配置参数
    # SKYWALKING_OPTS: >-
    #   -javaagent:/agent/skywalking-agent.jar
    #   -Dskywalking.agent.application_code=test-manager-service
    #   -Dskywalking.agent.sample_n_per_3_secs=6
    #   -Dskywalking.collector.backend_service=oap.skywalking:11800


## Liveness 和 Readiness 探针相关配置
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
livenessProbe:
  initialDelaySeconds: 180
  periodSeconds: 30
  timeoutSeconds: 3
  successThreshold: 1
  failureThreshold: 3
readinessProbe:
  initialDelaySeconds: 5
  periodSeconds: 15
  timeoutSeconds: 3
  successThreshold: 1
  failureThreshold: 3

## 资源请求和限制相关配置
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  limits:
    # cpu: 100m
    memory: 2Gi
  requests:
    # cpu: 100m
    memory: 2Gi

plugins:
  skywalkingAgentImage: registry.cn-shanghai.aliyuncs.com/c7n/skywalking-agent:6.6.0

## service 相关设置
## ref: http://kubernetes.io/docs/user-guide/services/
##
service:
  # 是否启用 service 暴露本服务
  enabled: true
  # Service 名称
  name: test-manager-service
  # Service 类型
  type: ClusterIP
  # 指定 service 的 clusterIP
  clusterIP: ~
  # 端口设置
  ports:
    # 服务端口
    http:
      port: 8093
      nodePort: 30146
    # 管理端口
    actuator:
      port: 8094
      nodePort: 30147
  ## externalIPs 设置
  # externalIPs:
  #   - externalIp1
  annotations: {}
    # prometheus.io/scrape: 'true'
    # prometheus.io/path: '/actuator/prometheus'
    # prometheus.io/port: '8094'

## 指标收集
metrics:
  # 收集应用的指标数据路径
  path: /actuator/prometheus
  # 性能指标应用分组
  group: spring-boot

## 日志收集
logs:
  enabled: true
  # 日志收集格式
  parser: spring-boot